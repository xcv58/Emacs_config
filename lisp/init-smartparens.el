(require-package 'smartparens)
(require 'smartparens-config)
(require 'smartparens-latex)

(smartparens-global-mode t)
(sp-pair "(" ")" :wrap "C-(")
(sp-pair "$" "$" :wrap "C-4")
(sp-pair "(" ")" :wrap "C-)")
(sp-pair "{" "}" :wrap "C-{")
(sp-pair "{" "}" :wrap "C-}")
(sp-pair "\"" "\"" :wrap "C-\"")

(define-key sp-keymap (kbd "C-c ,") 'sp-up-sexp)
(define-key sp-keymap (kbd "M-e") 'sp-up-sexp)
(define-key sp-keymap (kbd "M-b") 'sp-backward-sexp)
(define-key sp-keymap (kbd "M-f") 'sp-forward-sexp)
(define-key sp-keymap (kbd "C-c k") 'sp-kill-sexp)
(define-key sp-keymap (kbd "C-c u") 'sp-unwrap-sexp)

(defun sp-next-sexp-without-cross-line ()
  (let ((position (point)) (line (line-number-at-pos)))
    (sp-next-sexp)
    (if (< line (line-number-at-pos))
        (progn (goto-char position)
               (end-of-line)))))

(defun end-of-this()
  (interactive)
  (let ((position (point)) (line (line-number-at-pos)))
    (if (= position (line-end-position))
        (sp-up-sexp 1 1)
      (progn (sp-up-sexp)
             (if (= position (point))
                 (sp-next-sexp-without-cross-line))))))

(define-key evil-insert-state-map "\C-e" 'end-of-this)

(provide 'init-smartparens)
